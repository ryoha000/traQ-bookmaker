//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "match")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub title: String,
    pub channel_id: String,
    pub message_id: Option<String>,
    pub created_at: DateTimeUtc,
    pub closed_at: Option<DateTimeUtc>,
    pub winner_candidate_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bet::Entity")]
    Bet,
    #[sea_orm(
        belongs_to = "super::candidate::Entity",
        from = "Column::WinnerCandidateId",
        to = "super::candidate::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Candidate,
}

impl Related<super::bet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bet.def()
    }
}

impl Related<super::candidate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Candidate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
